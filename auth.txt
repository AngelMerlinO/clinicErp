Tras el login inicial guardas en el cliente dos valores:

accessToken (vida corta, p. ej. 30 s)

refreshToken (vida larga, p. ej. 7 d)

Cada vez que haces una petición protegida añades en el header:
Authorization: Bearer <accessToken>

Si la API responde 401 Unauthorized por “token expired”, el cliente hace automáticamente una llamada al endpoint de refresh:

bash
Copiar
Editar
POST /api/auth/refresh
{
  "userId": <tu id de usuario>,
  "refreshToken": "<refreshToken almacenado>"
}
El servidor valida el refreshToken contra los hashes guardados, lo destruye (rotación) y emite:

json
Copiar
Editar
{
  "accessToken": "<nuevo accessToken>",
  "refreshToken": "<nuevo refreshToken>"
}
El cliente reemplaza ambos tokens:

Guarda el nuevo accessToken donde antes

Guarda el nuevo refreshToken (idealmente en cookie HttpOnly)

Vuelve a reintentar la petición original con el token renovado y, si es exitosa, continúa normalmente.

Si en POST /refresh recibe otro 401, significa que el refreshToken expiró o es inválido:

Borra cualquier token residual

Fuerza al usuario a volver a loguearse